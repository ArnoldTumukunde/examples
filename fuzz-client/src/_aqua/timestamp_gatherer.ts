/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.6.0-272
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

// Functions
 

export function ts_getter(
    config?: {ttl?: number}
): Promise<number[]>;

export function ts_getter(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<number[]>;

export function ts_getter(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $res
                        (seq
                         (xor
                          (seq
                           (seq
                            (seq
                             (call -relay- ("op" "string_to_b58") [-relay-] k)
                             (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                            )
                            (par
                             (fold nodes n
                              (par
                               (seq
                                (xor
                                 (call n ("peer" "timestamp_ms") [] $res)
                                 (seq
                                  (call -relay- ("op" "noop") [])
                                  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                 )
                                )
                                (call -relay- ("op" "noop") [])
                               )
                               (next n)
                              )
                             )
                             (null)
                            )
                           )
                           (call -relay- ("op" "noop") [$res.$.[9]!])
                          )
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                         )
                         (call %init_peer_id% ("op" "identity") [$res] res-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "ts_getter",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Ts_getter_with_timeoutResult = [number[], string[]]
export function ts_getter_with_timeout(
    config?: {ttl?: number}
): Promise<Ts_getter_with_timeoutResult>;

export function ts_getter_with_timeout(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<Ts_getter_with_timeoutResult>;

export function ts_getter_with_timeout(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $res
                        (seq
                         (new $dead_peers
                          (seq
                           (xor
                            (seq
                             (seq
                              (seq
                               (call -relay- ("op" "string_to_b58") [-relay-] k)
                               (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                              )
                              (par
                               (fold nodes n
                                (par
                                 (new $status
                                  (seq
                                   (seq
                                    (par
                                     (xor
                                      (seq
                                       (call n ("peer" "timestamp_ms") [] $res)
                                       (ap "success" $status)
                                      )
                                      (seq
                                       (call -relay- ("op" "noop") [])
                                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                      )
                                     )
                                     (call -relay- ("peer" "timeout") [1000 "timeout"] $status)
                                    )
                                    (xor
                                     (mismatch $status.$.[0]! "success"
                                      (xor
                                       (seq
                                        (ap 0 $res)
                                        (ap n $dead_peers)
                                       )
                                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                      )
                                     )
                                     (null)
                                    )
                                   )
                                   (call -relay- ("op" "noop") [])
                                  )
                                 )
                                 (next n)
                                )
                               )
                               (null)
                              )
                             )
                             (call -relay- ("op" "noop") [$res.$.[19]!])
                            )
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                           )
                           (call %init_peer_id% ("op" "identity") [$dead_peers] dead_peers-fix)
                          )
                         )
                         (call %init_peer_id% ("op" "identity") [$res] res-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res-fix dead_peers-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "ts_getter_with_timeout",
    "returnType" : {
        "tag" : "multiReturn",
        "returnItems" : [
            {
                "tag" : "primitive"
            },
            {
                "tag" : "primitive"
            }
        ]
    },
    "argDefs" : [
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
